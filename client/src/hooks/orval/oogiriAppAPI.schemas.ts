/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Oogiri App API
 * チャットでのテーマ・メッセージ投稿以外のAPIエンドポイントを提供します。 ユーザー登録、ログイン、プロフィール更新、グループ作成、招待、回答、いいね、の機能を提供します。

 * OpenAPI spec version: 1.0.0
 */
export interface UserRegistration {
  /** 登録に使用するメールアドレス */
  email: string;
  /** ユーザーのパスワード */
  password: string;
}

export interface AuthResponse {
  /** アクセストークン (JWT形式) */
  accessToken: string;
  /** IDトークン (JWT形式) */
  idToken: string;
  /** リフレッシュトークン */
  refreshToken: string;
}

export interface UserProfileUpdate {
  /** ユーザーの表示名 */
  userName: string;
  /** プロフィール画像のURL */
  profileImage?: string;
  /** プロフィールの背景色 */
  profileColor?: string;
}

export interface User {
  /** ユーザーの一意識別子 */
  userId?: string;
}

/**
 * ユーザーの基本情報
 */
export interface UserBasicInfo {
  /** ユーザーの一意識別子 */
  userId: string;
  /** ユーザーの表示名 */
  userName: string;
  /** プロフィール画像のURL */
  profileImage?: string;
  /** プロフィール背景色 */
  profileColor?: string;
}

/**
 * ユーザーIDを指定するリクエスト
 */
export interface UserIdRequest {
  /** ユーザーの一意識別子 */
  userId: string;
}

export interface GroupCreate {
  groupName: string;
  /** グループ画像のURL */
  groupImage?: string;
  /** 招待されるユーザーIDリスト */
  userIds?: string[];
}

/**
 * 更新先のステータス。参加時は JOINED、拒否時は REJECTED
 */
export type GroupMembershipUpdateStatus =
  (typeof GroupMembershipUpdateStatus)[keyof typeof GroupMembershipUpdateStatus];

export const GroupMembershipUpdateStatus = {
  INVITED: "INVITED",
  JOINED: "JOINED",
  REJECTED: "REJECTED",
} as const;

export interface GroupMembershipUpdate {
  /** 更新先のステータス。参加時は JOINED、拒否時は REJECTED */
  status: GroupMembershipUpdateStatus;
}

export interface GroupInviteRequest {
  /** 招待されるユーザーIDリスト */
  userIds: string[];
}

export interface GroupMembershipUpdateRequest {
  /** 更新先のステータス（JOINED or REJECTED） */
  status: string;
}

export interface UserWithGroupsResponse {
  /** ユーザーの一意識別子 */
  userId?: string;
  /** 登録済みのメールアドレス */
  email?: string;
  /** ユーザー名（初回ログイン後に設定） */
  userName?: string;
  /** プロフィール画像のURL */
  profileImage?: string;
  /** プロフィール背景色 */
  profileColor?: string;
  /** 参加および招待されているグループのリスト */
  groups?: UserGroupMembership[];
}

export interface UserGroupMembership {
  /** グループの一意識別子 */
  groupId?: string;
  /** グループ名 */
  groupName?: string;
  /** グループ画像のURL */
  groupImage?: string;
  /** ユーザーのグループ内でのロール */
  role?: string;
  /** グループメンバー数 */
  memberCount?: number;
  /** グループへの参加状態（INVITED or JOINEDのみ） */
  status?: string;
  /** 招待したユーザーのusername（INVITEDのみ） */
  invitedBy?: string;
}

/**
 * グループ内のチャット履歴（テーマ、回答、通常のチャットメッセージを時系列で並べた一覧）
 */
export interface ChatHistoryResponse {
  /** 対象グループのID */
  groupId: string;
  /** 時系列にソートされた全メッセージの一覧。各メッセージは messageType により THEME, CHAT を区別する。 */
  messages: Message[];
}

/**
 * メッセージ種別。THEME：お題、CHAT：通常のチャットメッセージ
 */
export type MessageMessageType =
  (typeof MessageMessageType)[keyof typeof MessageMessageType];

export const MessageMessageType = {
  THEME: "THEME",
  CHAT: "CHAT",
} as const;

/**
 * 回答者の詳細情報
 */
export type MessageCreatedBy = {
  /** 回答者のユーザーID */
  userId: string;
  /** 回答者のユーザー名 */
  userName: string;
  /** 回答者のプロフィール画像URL */
  profileImage?: string;
  /** 回答者のプロフィール背景色 */
  profileColor?: string;
};

/**
 * 統一されたチャットメッセージ。THEME、CHAT のいずれか。
 */
export interface Message {
  /** メッセージの一意識別子 */
  messageId: string;
  /** メッセージ種別。THEME：お題、CHAT：通常のチャットメッセージ */
  messageType: MessageMessageType;
  /** メッセージ本文（お題、またはチャット文） */
  messageText: string;
  /** アップロード画像のURL（任意） */
  messageImage?: string;
  /** 賞品説明（THEME の場合のみ有効） */
  prizeText?: string;
  /** 回答期限（THEME の場合のみ有効） */
  deadline?: string;
  /** テーマの勝者のユーザーID（THEME の場合のみ有効） */
  winner?: string;
  /** 回答者の詳細情報 */
  createdBy: MessageCreatedBy;
  /** 作成日時（ISO8601形式） */
  createdAt: string;
}

export interface Answer {
  /** 回答本文 */
  answerText: string;
  /** 回答画像のURL（任意） */
  answerImage?: string;
}

/**
 * 回答者の詳細情報
 */
export type GetThemeAnswerCreatedBy = {
  /** 回答者のユーザーID */
  userId: string;
  /** 回答者のユーザー名 */
  userName: string;
  /** 回答者のプロフィール画像URL */
  profileImage?: string;
  /** 回答者のプロフィール背景色 */
  profileColor?: string;
};

export interface GetThemeAnswer {
  /** 回答の一意識別子 */
  answerId: string;
  /** 回答者の詳細情報 */
  createdBy: GetThemeAnswerCreatedBy;
  /** 回答本文 */
  answerText: string;
  /** 回答作成日時（ISO8601形式） */
  createdAt: string;
  /** いいねの数 */
  goodCount: number;
  /** 自分がいいねした回答かどうか */
  isLiked: boolean;
}

/**
 * 親メッセージIDを指定するリクエスト
 */
export interface ParentIdRequest {
  /** 親メッセージの一意識別子 */
  parentId: string;
}

/**
 * グループ内のテーマ全件
 */
export interface Themes {
  /** テーマが投稿されたグループID */
  groupId?: string;
  /** テーマのリスト */
  themes?: Message[];
}
